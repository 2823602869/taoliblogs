import{_ as d,c as e,a,o as r}from"./app-CZypL58b.js";const s="/assets/4GFW8RG@T78Q9WU6U4JBN-BuINw_Pl.png",n={};function i(l,t){return r(),e("div",null,t[0]||(t[0]=[a(`<p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p><p>第一个构造函数使用当前日期和时间来初始化对象。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Date( )</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Date(long millisec)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Date对象创建以后，可以调用下面的方法。</p><table><thead><tr><th>序号</th><th>方法和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>boolean after(Date date)</strong></td></tr><tr><td>若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td><td></td></tr><tr><td>2</td><td><strong>boolean before(Date date)</strong></td></tr><tr><td>若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td><td></td></tr><tr><td>3</td><td><strong>Object clone( )</strong></td></tr><tr><td>返回此对象的副本。</td><td></td></tr><tr><td>4</td><td><strong>int compareTo(Date date)</strong></td></tr><tr><td>比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td><td></td></tr><tr><td>5</td><td><strong>int compareTo(Object obj)</strong></td></tr><tr><td>若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td><td></td></tr><tr><td>6</td><td><strong>boolean equals(Object date)</strong></td></tr><tr><td>当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td><td></td></tr><tr><td>7</td><td><strong>long getTime( )</strong></td></tr><tr><td>返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td><td></td></tr><tr><td>8</td><td><strong>int hashCode( )</strong></td></tr><tr><td>返回此对象的哈希码值。</td><td></td></tr><tr><td>9</td><td><strong>void setTime(long time)</strong></td></tr></tbody></table><p>用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。 | | 10 | <strong>String toString( )</strong><br> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。 |</p><p><strong>获取当前时间实例：</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">import java.util.Date;</span>
<span class="line">  </span>
<span class="line">public class Demo {</span>
<span class="line">   public static void main(String args[]) {</span>
<span class="line">       // 初始化 Date 对象</span>
<span class="line">       Date date = new Date();</span>
<span class="line">        </span>
<span class="line">       // 使用 toString() 函数显示日期时间</span>
<span class="line">       System.out.println(date.toString());</span>
<span class="line">   }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行结果：</strong></p><p><img src="`+s+'" alt=""></p><h2 id="日期和时间的格式化编码" tabindex="-1"><a class="header-anchor" href="#日期和时间的格式化编码"><span>日期和时间的格式化编码</span></a></h2><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p><table><thead><tr><th><strong>字母</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>G</td><td>纪元标记</td><td>AD</td></tr><tr><td>y</td><td>四位年份</td><td>2001</td></tr><tr><td>M</td><td>月份</td><td>July or 07</td></tr><tr><td>d</td><td>一个月的日期</td><td>10</td></tr><tr><td>h</td><td>A.M./P.M. (1~12)格式小时</td><td>12</td></tr><tr><td>H</td><td>一天中的小时 (0~23)</td><td>22</td></tr><tr><td>m</td><td>分钟数</td><td>30</td></tr><tr><td>s</td><td>秒数</td><td>55</td></tr><tr><td>S</td><td>毫秒数</td><td>234</td></tr><tr><td>E</td><td>星期几</td><td>Tuesday</td></tr><tr><td>D</td><td>一年中的日子</td><td>360</td></tr><tr><td>F</td><td>一个月中第几周的周几</td><td>2 (second Wed. in July)</td></tr><tr><td>w</td><td>一年中第几周</td><td>40</td></tr><tr><td>W</td><td>一个月中第几周</td><td>1</td></tr><tr><td>a</td><td>A.M./P.M. 标记</td><td>PM</td></tr><tr><td>k</td><td>一天中的小时(1~24)</td><td>24</td></tr><tr><td>K</td><td>A.M./P.M. (0~11)格式小时</td><td>10</td></tr><tr><td>z</td><td>时区</td><td>Eastern Standard Time</td></tr><tr><td>&#39;</td><td>文字定界符</td><td>Delimiter</td></tr><tr><td>&quot;</td><td>单引号</td><td>`</td></tr></tbody></table>',15)]))}const c=d(n,[["render",i],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/blogs/post-doc/2020/05/2020-05-20-java-riqishijian/","title":"Java 日期时间","lang":"en-US","frontmatter":{"title":"Java 日期时间","date":"2020-05-20","categories":["java","blog"],"tags":["java","java基础","java学习","java学习框架"]},"headers":[{"level":2,"title":"日期和时间的格式化编码","slug":"日期和时间的格式化编码","link":"#日期和时间的格式化编码","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/post-doc/2020/05/2020-05-20-java-日期时间/index.md"}');export{c as comp,p as data};
