import{_ as n,c as a,a as s,o as i}from"./app-Cw2o-BxM.js";const l={};function t(d,e){return i(),a("div",null,e[0]||(e[0]=[s(`<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言：</span></a></h3><p>真实访问，宝塔防火墙屏蔽不了，只能是手动分析日志，进行拦截！<br> 下面我放几条规则，大家可以进行参考。</p><h2 id="_1-根据访问地址过滤。" tabindex="-1"><a class="header-anchor" href="#_1-根据访问地址过滤。"><span>1.根据访问地址过滤。</span></a></h2><p>检测到访问地址有test=这些关键词，自动跳转到公安备案网。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">if ($request_uri ~* test=) {</span>
<span class="line">return 301 http://www.beian.gov.cn;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-根据访问地址过滤。" tabindex="-1"><a class="header-anchor" href="#_2-根据访问地址过滤。"><span>2.根据访问地址过滤。</span></a></h2><p>检测到来源地址有Baiduspider，自动跳转到公安备案网。<br> 有的版权狗软件，顺序都搞不清楚，改改就拿来用了！</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">if ($http_referer ~* Baiduspider) {</span>
<span class="line">return 301 http://www.beian.gov.cn;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-根据ua过滤" tabindex="-1"><a class="header-anchor" href="#_3-根据ua过滤"><span>3.根据ua过滤</span></a></h2><p>检测到ua，有Baiduspider直接过滤。反正被打也会打不开，跟过滤蜘蛛一个性质！</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">if ($http_user_agent ~* Baiduspider) {</span>
<span class="line">return 444;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-检测代理ip" tabindex="-1"><a class="header-anchor" href="#_4-检测代理ip"><span>4.检测代理IP</span></a></h2><p>检测代理IP是否设置</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">if ($proxy_add_x_forwarded_for != $remote_addr){</span>
<span class="line">return 444;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const c=n(l,[["render",t],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/docs/guide/jisuanjijichu/2020-05-29-nginxfangcccelueguize（jianyi）/","title":"nginx防CC策略规则（简易）","lang":"en-US","frontmatter":{"title":"nginx防CC策略规则（简易）","date":"2020-05-29","categories":["html","linux","blog"],"tags":["html","linux"],"coverImage":"2020042612355625.jpg"},"headers":[{"level":3,"title":"前言：","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"1.根据访问地址过滤。","slug":"_1-根据访问地址过滤。","link":"#_1-根据访问地址过滤。","children":[]},{"level":2,"title":"2.根据访问地址过滤。","slug":"_2-根据访问地址过滤。","link":"#_2-根据访问地址过滤。","children":[]},{"level":2,"title":"3.根据ua过滤","slug":"_3-根据ua过滤","link":"#_3-根据ua过滤","children":[]},{"level":2,"title":"4.检测代理IP","slug":"_4-检测代理ip","link":"#_4-检测代理ip","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"docs/guide/计算机基础/2020-05-29-nginx防cc策略规则（简易）/index.md"}');export{c as comp,p as data};
