import{_ as i,c as r,a as n,o as t}from"./app-BlXaiT8W.js";const s={};function l(a,e){return t(),r("div",null,e[0]||(e[0]=[n(`<p>driver.find_element_by_定位元素详细版：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.id定位：find_element_by_id(self, id_)</span>
<span class="line">2.name定位：find_element_by_name(self, name)</span>
<span class="line">3.class定位：find_element_by_class_name(self, name)</span>
<span class="line">4.tag定位：find_element_by_tag_name(self, name)</span>
<span class="line">5.link定位：find_element_by_link_text(self, link_text)</span>
<span class="line">6.partial_link定位find_element_by_partial_link_text(self, link_text)</span>
<span class="line">7.xpath定位：find_element_by_xpath(self, xpath)</span>
<span class="line">8.css定位：find_element_by_css_selector(self, css_selector）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.driver.current_url：用于获得当前页面的URL<br> 2.driver.title：用于获取当前页面的标题<br> 3.driver.page_source:用于获取页面html源代码<br> 4.driver.current_window_handle:用于获取当前窗口句柄<br> 5.driver.window_handles:用于获取所有窗口句柄<br> 6.driver.find_element_by***** 定位元素，有18种<br> 7.driver.get(url):浏览器加载url。<br> 8.driver.forward()：浏览器向前（点击向前按钮）。<br> 9.driver.back()：浏览器向后（点击向后按钮）。<br> 10.driver.refresh()：浏览器刷新（点击刷新按钮）。<br> 11driver.close()：关闭当前窗口，或最后打开的窗口。<br> 12.driver.quit():关闭所有关联窗口，并且安全关闭session。<br> 13.driver.maximize_window():最大化浏览器窗口。<br> 14.driver.set_window_size(宽，高)：设置浏览器窗口大小。<br> 15.driver.get_window_size()：获取当前窗口的长和宽。<br> 16.driver.get_window_position()：获取当前窗口坐标。<br> 17.driver.get_screenshot_as_file(filename):截取当前窗口。<br> 18.driver.implicitly_wait(秒)：隐式等待，通过一定的时长等待页面上某一元素加载完成。若提前定位到元素，则继续执行。若超过时间未加载出，则抛出NoSuchElementException异常。<br> 19.driver.switch_to_frame(id或name属性值)：切换到新表单(同一窗口)。若无id或属性值，可先通过xpath定位到iframe，再将值传给switch_to_frame()<br> driver.switch_to.frame(id或name,或定位到的frame)<br> 20.driver.switch_to.parent_content():跳出当前一级表单。该方法默认对应于离它最近的switch_to.frame()方法。<br> 21.driver.switch_to.default_content():跳回最外层的页面。<br> 22.driver.switch_to_window(窗口句柄)：切换到新窗口。<br> 23.driver.switch_to.window(窗口句柄):切换到新窗口。<br> 24.driver.switch_to_alert():警告框处理。处理JavaScript所生成的alert,confirm,prompt.<br> 25.driver.switch_to.alert():警告框处理。<br> 26.driver.execute_script(js):调用js。<br> 27.driver.get_cookies():获取当前会话所有cookie信息。<br> 28.driver.get_cookie(cookie_name)：返回字典的key为“cookie_name”的cookie信息。<br> 29.driver.add_cookie(cookie_dict):添加cookie。“cookie_dict”指字典对象，必须有name和value值。<br> 30.driver.delete_cookie(name,optionsString):删除cookie信息。<br> 31.driver.delete_all_cookies():删除所有cookie信息。</p><p>1.element.size:获取元素的尺寸。<br> 2.element.text：获取元素的文本。<br> 3.element.tag_name:获取标签名称。<br> 4.element.clear():清除文本。<br> 5.element.send_keys(value):输入文字或键盘按键（需导入Keys模块）。<br> 6.element.click()：单击元素。<br> 7.element.get_attribute(name):获得属性值<br> 8.element.is_displayed():返回元素结果是否可见（True 或 False）<br> 9.element.is_selected():返回元素结果是否被选中（True 或 False）<br> 10.element.find_element*():定位元素，用于二次定位。</p>`,4)]))}const _=i(s,[["render",l],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/docs/guide/jisuanjijichu/2021-01-07-seleniumchangyongwebdriver-apihuizong/","title":"selenium常用webdriver api汇总","lang":"en-US","frontmatter":{"title":"selenium常用webdriver api汇总","date":"2021-01-07","categories":["blog"],"tags":["selenium"],"coverImage":"selenium2.png"},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"docs/guide/计算机基础/2021-01-07-selenium常用webdriver-api汇总/index.md"}');export{_ as comp,c as data};
