import{_ as i,c as l,b as s,d as a,e as t,a as p,o,r as u}from"./app-D0tMrQXM.js";const c="/taoliblogs/assets/1632878695-BOzeUr_D.png",r={},d={href:"https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/14937715",target:"_blank",rel:"noopener noreferrer"},k={href:"https://baike.baidu.com/item/%E5%AD%97%E8%8A%82/1096318",target:"_blank",rel:"noopener noreferrer"},m={href:"https://baike.baidu.com/item/%E7%BD%97%E7%BA%B3%E5%BE%B7%C2%B7%E6%9D%8E%E7%BB%B4%E6%96%AF%E7%89%B9/700199",target:"_blank",rel:"noopener noreferrer"},v={href:"https://baike.baidu.com/item/MD4/8090275",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/SHA-2/22718180",target:"_blank",rel:"noopener noreferrer"},g={href:"https://baike.baidu.com/item/SSL/320778",target:"_blank",rel:"noopener noreferrer"},f={href:"https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/212550",target:"_blank",rel:"noopener noreferrer"};function D(M,n){const e=u("ExternalLinkIcon");return o(),l("div",null,[n[16]||(n[16]=s("p",null,"MD5属不属于加密算法，因为只可以加密，无法获得密码原文，只能属于算法。",-1)),n[17]||(n[17]=s("h2",{id:"常见的加密算法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#常见的加密算法"},[s("span",null,"常见的加密算法")])],-1)),n[18]||(n[18]=s("p",null,"常用加密算法可以分为单向加密和双向加密。",-1)),n[19]||(n[19]=s("ul",null,[s("li",null,"单向加密：只提供单向加密不能解密，不可逆的过程。通常用来存储用户名和密码，直接从前端传输来存储到数据库中"),s("li",null,"双向加密：又分为对称性加密算法和非对称性加密算法。对称性加密算法，发送和接收端双方都知道秘钥和加密算法且秘钥都是相同的，之后便是对数据的加密和解密过程。非对称加密算法 ：发送之前A B事先生成一对秘钥，A将秘钥发送给B，B将秘钥发送给 A，A先用B的秘钥加密密文在发送B，B解密，同理。")],-1)),n[20]||(n[20]=s("h2",{id:"_1-什么是md5加密-单向加密",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-什么是md5加密-单向加密"},[s("span",null,"1.什么是MD5加密(单向加密)")])],-1)),s("p",null,[n[7]||(n[7]=s("strong",null,"MD5信息摘要算法",-1)),n[8]||(n[8]=a(" （英语：MD5 Message-Digest Algorithm），一种被广泛使用的 ")),s("a",d,[n[0]||(n[0]=a("密码散列函数")),t(e)]),n[9]||(n[9]=a(" ，可以产生出一个128位（16 ")),s("a",k,[n[1]||(n[1]=a("字节")),t(e)]),n[10]||(n[10]=a(" ）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家 ")),s("a",m,[n[2]||(n[2]=a("罗纳德·李维斯特")),t(e)]),n[11]||(n[11]=a(" （Ronald Linn Rivest）设计，于1992年公开，用以取代 ")),s("a",v,[n[3]||(n[3]=a("MD4")),t(e)]),n[12]||(n[12]=a(" 算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如 ")),s("a",b,[n[4]||(n[4]=a("SHA-2")),t(e)]),n[13]||(n[13]=a(" 。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如 ")),s("a",g,[n[5]||(n[5]=a("SSL")),t(e)]),n[14]||(n[14]=a(" 公开密钥认证或是 ")),s("a",f,[n[6]||(n[6]=a("数字签名")),t(e)]),n[15]||(n[15]=a(" 等用途。"))]),n[21]||(n[21]=p(`<h2 id="_2-md5加密的功能" tabindex="-1"><a class="header-anchor" href="#_2-md5加密的功能"><span>2.MD5加密的功能</span></a></h2><p>输入任意长度的信息，经过处理，输出都是128位的信息值</p><p>不同的输入对应的输出一定不同，保证唯一性</p><h2 id="_3-md5加密的优点和缺点" tabindex="-1"><a class="header-anchor" href="#_3-md5加密的优点和缺点"><span>3.MD5加密的优点和缺点</span></a></h2><p>优点:</p><ul><li>防止被篡改，在传输过程中一旦被串改，那么计算出的MD5值一定不同。</li><li>计算速度快。加密速度快，不需要秘钥。</li><li>检查文件的完整性，一旦文件被更改，MD5值也是不同的。</li><li>防止看到明文，公司存放密码存放的是MD5值。</li><li>防止抵赖，用于数字签名，一旦用户的文件被第三方MD5加密，若以后A说这个文件不是他写的，那么当用文件MD5后获得的签名一致，可以确认。</li></ul><p>缺点:</p><ul><li>作为一种散列算法，虽然很难发生散列碰撞，但是经过证实，仍然存在两种不同数据会发生碰撞。</li><li><strong>MD5的安全性：将用户的密码直接MD5后存储在数据库是不安全的。第一，用户普遍习惯用容易记忆的密码，生日，手机号等，黑客容易破译此类密码。这也是加盐值的一个原因。第二，直接MD5存入数据库，若数据库被破解，通过MD5反查会查到密码，需要随机盐值的配合。</strong></li><li>考虑到多数人所使用的密码为常见的组合，攻击者可以将所有密码的常见组合进行单向哈希，得到一个摘要组合，然后与数据库中的摘要进行比对即可获得对应的密码。这个摘要组合也被称为rainbow table。</li></ul><h2 id="_4-md5的实现原理" tabindex="-1"><a class="header-anchor" href="#_4-md5的实现原理"><span>4.MD5的实现原理：</span></a></h2><ul><li>填充：将输入信息进行512求余分组，若不等于448，那么进行填充 1 和0，一个1 N个0。最后的数据就为N*512+448</li><li>记录信息长度：将得到的信息用64位存储填充之前的信息长度，这样448+64=512，总信息为N+1个512</li><li>以四个常数ABCD与每组512位进行函数运算，最后输出的结果就是4组32位的常数。拼接得到MD5码</li></ul><p>5.MD5加密 代码实现：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line">import java.security.MessageDigest<span class="token punctuation">;</span> </span>
<span class="line">import java.security.NoSuchAlgorithmException<span class="token punctuation">;</span></span>
<span class="line"> <span class="token comment">/**</span>
<span class="line">  * MD5加密 </span>
<span class="line">  */</span> </span>
<span class="line"><span class="token selector">public class MD5Utils</span> <span class="token punctuation">{</span> </span>
<span class="line"><span class="token selector">public static String code(String str)</span><span class="token punctuation">{</span> </span>
<span class="line"><span class="token selector">try</span> <span class="token punctuation">{</span> </span>
<span class="line">MessageDigest messageDigest = MessageDigest.<span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> messageDigest.<span class="token function">update</span><span class="token punctuation">(</span>str.<span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">byte[]byteDigest = messageDigest.<span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">int i<span class="token punctuation">;</span></span>
<span class="line">StringBuffer buffer = new <span class="token function">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> for <span class="token punctuation">(</span>int offset = 0<span class="token punctuation">;</span> offset&lt;byteDigest.length<span class="token punctuation">;</span>offset++<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> i = byteDigest[offset]<span class="token punctuation">;</span> </span>
<span class="line"><span class="token selector">if(i&lt;0)</span><span class="token punctuation">{</span></span>
<span class="line"> i+=256<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"><span class="token selector">if(i&lt;16)</span><span class="token punctuation">{</span></span>
<span class="line"> buffer.<span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line">buffer.<span class="token function">append</span><span class="token punctuation">(</span>Integer.<span class="token function">toHexString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line">//32位加密 </span>
<span class="line">return buffer.<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">//16位加密</span>
<span class="line"><span class="token punctuation">}</span> <span class="token selector">catch (NoSuchAlgorithmException e)</span> <span class="token punctuation">{</span> </span>
<span class="line">e.<span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> return null<span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line">  <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt=""></p>',13))])}const E=i(r,[["render",D],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/docs/guide/jisuanjijichu/2021-09-29-md5jiamisuanfa/","title":"MD5加密算法","lang":"en-US","frontmatter":{"title":"MD5加密算法","date":"2021-09-29","categories":["java"],"tags":["md5"]},"headers":[{"level":2,"title":"常见的加密算法","slug":"常见的加密算法","link":"#常见的加密算法","children":[]},{"level":2,"title":"1.什么是MD5加密(单向加密)","slug":"_1-什么是md5加密-单向加密","link":"#_1-什么是md5加密-单向加密","children":[]},{"level":2,"title":"2.MD5加密的功能","slug":"_2-md5加密的功能","link":"#_2-md5加密的功能","children":[]},{"level":2,"title":"3.MD5加密的优点和缺点","slug":"_3-md5加密的优点和缺点","link":"#_3-md5加密的优点和缺点","children":[]},{"level":2,"title":"4.MD5的实现原理：","slug":"_4-md5的实现原理","link":"#_4-md5的实现原理","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"docs/guide/计算机基础/2021-09-29-md5加密算法/index.md"}');export{E as comp,h as data};
