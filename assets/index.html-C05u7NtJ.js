import{_ as s,c as a,a as i,o as p}from"./app-BlXaiT8W.js";const n={};function t(r,e){return p(),a("div",null,e[0]||(e[0]=[i(`<h2 id="优化方案介绍" tabindex="-1"><a class="header-anchor" href="#优化方案介绍"><span>优化方案介绍</span></a></h2><p>整个优化方案分为3篇文章,争取写个由简入深的介绍，希望没有技术背景的站长都能看懂：</p><ul><li>第一篇介绍加速的原理（本篇也就是第一篇了）</li><li>第二篇介绍加速插件 W3 Total Cache</li><li>第三篇介绍 MySQL 的优化</li></ul><h2 id="一、主机选择" tabindex="-1"><a class="header-anchor" href="#一、主机选择"><span>一、主机选择</span></a></h2><p>由于本篇是整体优化，所以必须要能配置主机 PHP 、 Nginx、MySQL 这些相关软件，所以，这篇文章是按照此类主机写的，如果您的主机不能配置这些，那么也可以看看相关原理，再自己动手想办法进行优化。</p><h2 id="二、软件环境的选择" tabindex="-1"><a class="header-anchor" href="#二、软件环境的选择"><span>二、软件环境的选择</span></a></h2><p>64 位 CentOS、Nginx、PHP-FPM、APC、Memcached、MySQL，这里介绍一下 Nginx、PHP-FPM、APC、Memcached 这3个是什么。</p><p>PHP-FPM 可以理解成单独的 PHP 服务器，简单的理解就是如果你使用了 PHP-FPM，那么你的 PHP 脚本就不必和 Web 服务器放置在同一个服务器上，而且支持负载均衡。一个 Nginx 可以和多个 PHP-FPM 服务器协同工作。<br> APC 是 PHP 缓存工具。PHP 每次处理请求都会要重新编译源代码，APC 就是负责把编译好的执行文件存储再内存中，下次调用的时候就不必再重新编译了，极大提高了访问速度。<br> Memcache 也是一个内存工具，它的主要作用是将一些静态化的内容存储再内存里面，这样当下次用户访问时，不必读取硬盘，访问速度自然大大加快。Memcache 可以用来存储 Session。具体安装方法请看：VPS安装Memcached对象缓存 为WordPress再提速！</p><h2 id="三、wordpress-缓存插件的选择" tabindex="-1"><a class="header-anchor" href="#三、wordpress-缓存插件的选择"><span>三、WordPress 缓存插件的选择</span></a></h2><p>我选的是臭名昭著的W3 Total Cache,此插件配置麻烦，效率也不是最高的，我选它的原因就和它的名字一样，集合了所有的功能。强烈建议安装此插件之前先百度找出卸载它的办法，还有，晚上没人的时候进行配置，出问题了还有时间补救。</p><h2 id="四、加速原理" tabindex="-1"><a class="header-anchor" href="#四、加速原理"><span>四、加速原理</span></a></h2><p>1、利用 APC 缓存 PHP 文件，这一步即可极大提高网站响应速度，尤其是后台，几乎是秒开。安装好 APC 以后，打开 /etc/php.d/apc</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">extension=apc.so //引入apc模块apc.stat=off //关闭文件检查，默认是onapc.shm_size=128M //内存大小，一般wordpress使用128M是比较合适的大小。apc.ttl=7200 //缓存时间apc.user_ttl=7200 //用户缓存时间</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里重点说一下，apc.stat=0ff  这个参数，此行关闭了文件更改检查，如果不关闭，那么每次 PHP 都会检查文件是否有更改，降低运行速度。关闭以后提高速度，但是如果 PHP 文件被更改了，那么是不会有效的（HTML 和 JS 文件不受影响）。所以如果对 PHP 进行更改时需要把此项设为on。</p><p>APC 有管理工具页面，可以至官网下载一个名为 apc.php  的文件，放到服务器上就可以查看 APC 运行状态了。</p><p>2、利用 Memcached 缓存静态化页面</p><p>存入内存，比读取硬盘要快很多，用户访问量越大，速度提升越明显。在 VPS安装Memcached对象缓存 为WordPress再提速！ 配置完成后，W3 Totle Cache 插件中 Memcache 由灰色变成可选状态。可以将 Page cache method 、Minify cache method、Database cache method、Object cache method 这些全部设成 Memcached。从此，绝大部分请求就会直接重内存返回数据，服务器硬盘可以专心应付 MySQL 了。<br> Memcached 也有专门的管理页面可以下载，详情不再赘述。打开 PHP-FPM 的配置文件/etc/php-fpm.d/www.conf ，最后几行应该是这样的：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">; Set session path to a directory owned by process user;php_value[session.save_handler] = files //注释掉;php_value[session.save_path] = /var/lib/php/session //注释掉;最终在此设置的session路径才有效php_value[session.save_handler] = memcache //加上此行php_value[session.save_path] = tcp://127.0.0.1:11211 //加上此行，注意ip地址和端口号 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、去除谷歌字体：Auto Replace Google’s URL – 轻松替换前后台国外字体 为网站大幅提速</p><p>4、合理配置 PHP-FPM ，极大提高 PHP 运行速度。</p><p>打开 /etc/php-fpm.d/www.conf ，配置39 和 41行用户名和组为 nginx 。其中必须关闭156行：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">slowlog = /var/log/php-fpm/www-slow.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是个 BUG ，记录慢日志的话 PHP 必然会内存溢出导致所有 PHP 全部报错。将这行前面打个冒号注释掉就可以了。</p><p>5、合理配置 MySQL</p><p>MySQL 的配置原理复杂，但是总体思路就是减少硬盘读取，合理利用内存的缓存。单独开一篇，第三篇讲。</p><p>MySQL 优化这里可以先提供一个插件，作用是删除 Post 的历史版本，几乎可以削减 Post 表 2/3 的容量，那些post累计到几万的站应该是必备此神插件：<strong>WP-Optimize</strong>。此插件除了可以删除帖子的版本，还可以优化数据表，这点也很有用。</p><p>6、Nginx 配置必杀技。</p><p>Nginx 作为web服务器，是网站软件环境的主题，为什么放在最后才讲呢？众所周知，我们的主机是虚拟机，在一个 8 核或者 16 核的机器上，随机给你分配的cpu，你你买的4核，那么就只会分配4个cpu给你使用。如果这台物理机有10个站在用，实际的cpu使用是未知的，但是有一个规律是不变的，第一个核使用是最频繁，占用率最高。原因就是很多软件默认都使用第一个核。</p><p>可爱的nginx有cpu进程分配功能。你可以反过来分配，让nginx默认使用其他核，这样就避开了同主机其他用户的冲突。</p><p>具体操作如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">执行命令cat /proc/cpuinfo会出来一大串结果，我们只要看physical id，这就是CPU的物理id，如果你是买的2核cpu那么，会有2个physical id。请仔细查找。cpu cores : 16 表示这是一台16核的服务器physical id : 0 这表示分配了第一个核给你physical id : 3 这表示分配了第五个核给你服务商分配cpu是随机的，重启以后有可能改变，所以，每次服务器重启都要重新查看cpu核心号和重新绑定nginx。打开/etc/nginx/conf.d/plus086.conf //文件名请换成自己的配置文件名加入以下2行：worker_processes 2; worker_cpu_affinity 00000001 00000011; worker_processes 2 这行很好理解，表示有2个核心工作。worker_cpu_affinity 表示cpu的核心的序号，8位2进制表示。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>CPU 内核编号：</p><p>8位2进制表示<br> 0：00000001<br> 1：00000010<br> 2：00000011<br> 3：00000100<br> 4：00000101<br> 5：00000110<br> 6：00000111<br> 7：00001000</p><p>如果分配了0和6号核，那么就应该这样填写：worker_cpu_affinity 00000111 00000001;</p><p>将6号核放前面，避开1号核的负载，直接使用比较空闲的6号核。如果你的机器超过8核，那么最多绑定8核也够了，Nginx 官方不推荐超过8核来分配进程。</p>`,35)]))}const c=s(n,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/blogs/post-doc/2020/04/2020-04-28-wordpress-zhongjijiasuxilie-jiasuyuanli/","title":"WordPress 终极加速系列 – 加速原理","lang":"en-US","frontmatter":{"title":"WordPress 终极加速系列 – 加速原理","date":"2020-04-28","categories":["html","wp","blog"],"tags":["wordpress","wordpressspeed"],"coverImage":"2020042613450311.jpg"},"headers":[{"level":2,"title":"优化方案介绍","slug":"优化方案介绍","link":"#优化方案介绍","children":[]},{"level":2,"title":"一、主机选择","slug":"一、主机选择","link":"#一、主机选择","children":[]},{"level":2,"title":"二、软件环境的选择","slug":"二、软件环境的选择","link":"#二、软件环境的选择","children":[]},{"level":2,"title":"三、WordPress 缓存插件的选择","slug":"三、wordpress-缓存插件的选择","link":"#三、wordpress-缓存插件的选择","children":[]},{"level":2,"title":"四、加速原理","slug":"四、加速原理","link":"#四、加速原理","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/post-doc/2020/04/2020-04-28-wordpress-终极加速系列-加速原理/index.md"}');export{c as comp,d as data};
